#include "util.c"

int theFD;

  // print a screen of information:

int printScreen ()
{
  int bytesRead, i = 0, j = 0;
  int bufSize = 80;
  char buffer[bufSize];

  bytesRead = read (theFD, buffer, bufSize);
  //buffer[bytesRead] = 0;
  while (i < 23 && bytesRead > 0)
  {
      // print characters one at a time to handle
      // carriage returns properly:

    for (j = 0; j < 80; j++)
    {
      if (buffer[j] == '\r')
      {
        //printf ("%c", '\n');
        mputc ('\n');
      } // end if carriage return, print appropriately
      else
      {
        //printf ("%c", buffer[j]);
        mputc (buffer[j]);
      } // end if not carriage return print what we see
    }// end print characters
    //printf ("%s", buffer);
    mybzero (buffer, bufSize);

    bytesRead = read (theFD, buffer, bufSize);
    i++;

  } // end while loop

  return bytesRead;

} // end printScreen function

  // main function

int main (int argc, char * argv[])
{
  int bytesRead, lineNum, i = 0, j = 0;
  int bufSize = 80;
  char buffer[bufSize], userInput;

  printf ("my more called%d\n",0);

  if (argc > 1)
  {
    theFD = open (argv[1], 0);

    /*
    if (theFD < 0)
    {
      printf ("cannot open file %s\n", argv[1]);
      return 0;
    } // end if open fails

    printScreen ();

    bytesRead = read (theFD, buffer, bufSize);

    while (bytesRead > 0)
    {
      userInput = getc ();

      if (userInput == ' ')
      {
        bytesRead = printScreen ();
      } // end if user presses spacebar
      else
      {
        printf ("%s", buffer);
        mybzero (buffer, bufSize);

        bytesRead = read (theFD, buffer, bufSize);

      } // end user pushes a different key
    } // end while loop

    close (theFD);

    return 0;
    */

  } // end if there is an argument
  else
  {
    theFD = dup(0);

  } // end there is no argument

  if (theFD < 0)
  {
    printf ("cannot open file %s\n", argv[1]);
    return 0;
  } // end if open fails

  printScreen ();

  bytesRead = read (theFD, buffer, bufSize);

  while (bytesRead > 0)
  {
    userInput = getc ();

    if (userInput == ' ')
    {
      bytesRead = printScreen ();
    } // end if user presses spacebar
    else
    {
      //printf ("%s", buffer);
      /////
      // print characters one at a time to handle
      // carriage returns properly:

    for (j = 0; j < 80; j++)
    {
      if (buffer[j] == '\r')
      {
        //printf ("%c", '\n');
        mputc ('\n');
      } // end if carriage return, print appropriately
      else
      {
        //printf ("%c", buffer[j]);
        mputc (buffer[j]);
      } // end if not carriage return print what we see
    }// end print characters
      /////
      mybzero (buffer, bufSize);

      bytesRead = read (theFD, buffer, bufSize);

    } // end user pushes a different key

  } // end while loop

  close (theFD);

  return 0;

} // end main function
